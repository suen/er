#!/usr/bin/env python3
import importlib
import sys
import time
import signal
import os
import http.client, ssl
from base64 import b64encode
import traceback
import tempfile
import subprocess
import json
import socket
import platform

debug = True

def openUrl(url):
  system = uname()
  opener = ""
  if system == "linux":
    opener = "xdg-open"
  
  elif system == "windows":
    opener = "cygstart"

  elif system == "darwin":
    opener = "open"

  code = sh("%s %s"%(opener, url), ignoreError=True)
  if (code != 0):
    openScript = os.environ.get("HOME") + "/bin/open.sh"
    code = sh("%s %s"%(openScript, url), ignoreError=True)

  if (code != 0):
    log("Could not find any utility to open %s"%(url))


def uname():
  return platform.system().lower()


def getEnvVar(key, defaultValue=None):
  value = os.environ.get(key)
  erValue = getErVar(key)
  if (value is None or value == ""):
      if (erValue is None or erValue == ""):
        return defaultValue
      return erValue
  if erValue is None or erValue == "":
    setErVar(key, value)
  return value


def setErVar(key, value):
  home = os.environ.get("HOME")
  erJson = home + "/.er.json"
  props = {}
  if (os.path.exists(erJson)):
    with open(erJson, "r") as f:
      props = json.load(f)
  
  props[key] = value
  with open(erJson, "w") as f:
    json.dump(props, f)


def setEnvVar(key, value):
  setErVar(key, value)  
  os.environ[key] = value
  

def getErVar(key, defaultValue=None):
  props = getAllErVars()
  return props[key] if key in props else defaultValue


def getAllErVars():
  home = os.environ.get("HOME")
  erJson = home + "/.er.json"
  if (os.path.exists(erJson)):
    with open(erJson, "r") as f:
      props = json.load(f)
      return props
  return {}


def checkEnvVars(varNames):
  errors = []
  for key in varNames.keys():
    value = getEnvVar(key, "")
    keyDesc = varNames[key]

    if isinstance(keyDesc, str):
      doc = keyDesc
      required = True
    else:
      doc = keyDesc[0]
      required = keyDesc[1]
    
    if not value and required:
      errors.append("%s env variable is not set. %s : %s"%(key, key, doc))

  if errors:
    print("\n".join(errors))
    return False
  return True
    

def getTimeElapsed(lastTime):
    diff_seconds = int((time.time() - lastTime)*1000)
    return toHourMinSec(diff_seconds)


def getTime():
    now = time.localtime()
    def paddedDigit(x): return str(x).zfill(2)
    dateTime = "%s:%s:%s" % (paddedDigit(now.tm_hour), paddedDigit(
        now.tm_min), paddedDigit(now.tm_sec))
    return dateTime


def getDate():
  now = time.localtime()
  def paddedDigit(x): return str(x).zfill(2)
  return "%s-%s-%s" % (paddedDigit(now.tm_year), paddedDigit(now.tm_mon), paddedDigit(now.tm_mday))


def sh(cmd, returnOutput=False, ignoreError=False, noLog=False):
  if (not noLog):
    log(cmd)
  shCmd = ["bash", "-c", "set -euo pipefail; "+ cmd]
  ret = None
  if (returnOutput):
    ret = subprocess.run(shCmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  else:
    ret = subprocess.run(shCmd)

  code = ret.returncode
  if ignoreError:
    return code

  if (code != 0):
    msg = "[%s] exited with code '%d'"%(cmd, code)
    raise Exception(msg)
  
  if returnOutput:
    return ret.stdout.decode("utf-8")
  
  return code


def toHourMinSec(milliseconds):
    seconds = milliseconds / 1000
    minutes = int(seconds / 60)
    mod_seconds = int(seconds % 60)
    seconds_str = str(mod_seconds) + "sec"
    if (minutes > 60):
        mod_minutes = int(minutes % 60)
        hours = int(minutes / 60)
        return str(hours) + "h " + str(mod_minutes) + " min " + seconds_str
    elif (minutes > 0):
        return str(minutes) + "min " + seconds_str
    return seconds_str

def base64_encode(username, password):
    token = b64encode(f"{username}:{password}".encode('utf-8')).decode("ascii")
    return token

def getPage(url, username=None, password=None):
    isSecure = "https" in url
    
    domainName = url.replace("https://", "").replace("http://", "")
    slashIndex = domainName.index(
        "/") if "/" in domainName else len(domainName)
    suffix = domainName[slashIndex:] if slashIndex != len(domainName) else "/"
    domainName = domainName[:slashIndex]

    conn = None
    if isSecure:
      conn = http.client.HTTPSConnection(domainName, context=ssl._create_unverified_context()) 
    else:
      conn = http.client.HTTPConnection(domainName)

    headers = {}
    if username and password:
      headers["Authorization"] = "Basic " + base64_encode(username, password)

    conn.request("GET", suffix, headers=headers)
    resp = conn.getresponse()

    if resp.status != 200:
        return [resp.status, None]

    return [resp.status, resp.read()]


def log(msg):
  print("[%s] [%s] %s" % ("er", getTime(), msg))


def extractKeyValue(text, key):
    envLines = text.split("\n")
    nameLine = next(filter(lambda l: key+"=" in l, envLines), "")
    if (nameLine != ""):
        return nameLine.replace(key+"=", "")
    return ""


def parseKeyValueFile(filepath):
  if not os.path.exists(filepath):
    raise Exception("File does not exist")
  lines = open(filepath).read().split("\n")
  kv = next(map(lambda line: (line[0:line.indexOf("=")], line[line.indexOf("=")+1]), lines))
  return kv 


class ErContext:

  def __init__(self):
    self.tools = []

  def log(self, msg):
    log(msg)
  
  def register(self, tool):
    self.tools.append(tool)

  def getPage(self, url, username=None, password=None):
    return getPage(url, username=username, password=password)
  
  def openUrl(self, url):
    openUrl(url)

  def uname(self):
    return uname()

  def getEnvVar(self, varName, defaultValue):
    return getEnvVar(varName, defaultValue)
  
  def setEnvVar(self, varName, varValue):
    setEnvVar(varName, varValue)

  def checkEnvVars(self, varsDoc):
    return checkEnvVars(varsDoc)

  def isTcpPortOpen(self, host, port, waitUntilAvailable=False, timeout=180):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    i_port = int(port)
    result = sock.connect_ex((host, i_port))

    if (not waitUntilAvailable):
      return result is not None and result == 0

    portListening = result is not None and result == 0
    elapsed = 0
    while not portListening and elapsed <= timeout :
      self.log("Waiting until (%s : %s) is listening"%(host, port))
      try : 
        time.sleep(10)
        elapsed += 10
        result = sock.connect_ex((host, i_port))
      except :
        pass
      portListening = result is not None and result == 0

    if not portListening and elapsed >= timeout:
      self.log("Timed out waiting for (%s : %d) to listen"%(host, i_port))

    return portListening

  def isTcpPortOpenNc(self, host, port):
    status = self.sh('nc %s %s -w 1 && echo "listening" || echo "not-listening"'%(host, port), returnOutput=True).strip()
    return not "not-listening" in status

  def sh(self, cmd, returnOutput=False, ignoreError=False, noLog=False):
    return sh(cmd, returnOutput, ignoreError, noLog)

  def getTimeElapsed(self, lastTime):
    return getTimeElapsed(lastTime)

  def toHourMinSec(self, milliseconds):
    return toHourMinSec(milliseconds)

  def hasArgs(self, args, expected):
    return next(filter(lambda a: a.lower() in expected, args), None) is not None

  def parseNamedArg(self, argName, alias, flag, args):
    argName = "--" + argName
    alias = "-" + alias

    argIndex = -1
    usedArg = ""
    if argName in args:
      argIndex = args.index(argName)
      usedArg = argName
    if alias in args:
      usedArg = alias
      argIndex = args.index(alias)

    if argIndex == -1:
      return [None, None]

    if flag:
      return [usedArg, True]

    if argIndex >= len(args):
      return None

    return [usedArg, args[argIndex+1:argIndex+2][0]]


  def parseArgs(self, cmdArguments, args):
    argsValue = {}
    for argName in cmdArguments.keys():
      alias = cmdArguments[argName]['alias']
      flag = cmdArguments[argName]['flag'] if 'flag' in cmdArguments[argName] else False
      usedArg,value = self.parseNamedArg(argName, alias, flag, args)
      argsValue[argName] = value
      
      if value is not None :
        args.remove(usedArg)
        if not flag:
          args.remove(value)

    #Position arguments
    for i in range(0, len(args)):
      argsValue[i] = args[i]

    for argName in cmdArguments.keys():
      if argName not in argsValue or argsValue[argName] is None and 'position' in cmdArguments[argName]:
        position = cmdArguments[argName]['position']
        if position is not None and (position-1) in argsValue:
          argsValue[argName] = argsValue[position-1]

    #Fill in default value if exists
    for argName in cmdArguments.keys():
      if argName not in argsValue or argsValue[argName] is None and "default" in cmdArguments[argName]:
        argsValue[argName] = cmdArguments[argName]["default"]
      
      if argName not in argsValue or argsValue[argName] is None and "flag" in cmdArguments[argName]:
        argsValue[argName] = False
    
    return argsValue

  def getOrPrintError(self, argName, argsValues, error):
    if argName not in argsValues or argsValues[argName] is None:
      self.log(error)
      return None
    return argsValues[argName]

  def run(self, cmd, cmdArgs=None):
    ret = 0
    eligibleCmds = list(filter(lambda c: cmd in [c.prefix()]+c.alias(), self.tools))
    if (len(eligibleCmds) != 0):
        try:
            if cmdArgs is None:
              cmdArgs = []
            cmdToRun = eligibleCmds[0]
            self.log("--- %s ---"%(cmdToRun.prefix()))
            parsedArgs = self.parseArgs(cmdToRun.arguments(), cmdArgs)
            cmdToRun.run(parsedArgs)
        except Exception as e:
            msg = e.args[0]
            if (msg is not None):
              self.log("Error : %s"%msg)
            else:
              self.log("Invocation of command '%s' went wrong"%(cmd))
            if debug:
              traceback.print_exc(file=sys.stderr)
              sys.stderr.write(str(e) + "\n")
            ret = 1
    elif cmd != "":
      self.log("Cmd '%s' not found. Execute `er help` to get list of available commands"%(cmd))
    else:
        print("\nUsage : \n %s <command> [command args]\n" % sys.argv[0])
        ret = 1
    return ret



class Alias:
    def __init__(self, er):
      self.er = er

    def prefix(self):
      return "alias"

    def alias(self):
      return ["a"]

    def description(self):
      return "Alias for long chained `er` commands. Once the alias is set, use `er [alias name] to execute the chained `er` commands."

    def arguments(self):
      return {"command": {"alias": "c", "description": "er command(s) (and arguments) without `er` prefix englobed between quotes \" \". Multiple commands are joined by a '&'."},
            "name": {"alias": "n", "position":1, "description": "Name of the alias"},
            "delete": {"alias": "d", "flag": True, "description": "Delete the alias"},
            "list": {"alias": "l", "flag": True, "description": "List available aliases"}
      }
    
    def isAlias(self, name):
      nameKey = "alias." + name
      existingCmd = getErVar(nameKey, "")
      return existingCmd is not None and existingCmd != ""

    def getAllAlias(self):
      allVars = getAllErVars()
      availableAliases = []
      for var in allVars.keys():
        if "alias." in var:
          aliasName = var.replace("alias.", "")
          cmd = allVars[var]
          if cmd:
            availableAliases.append({"alias" : aliasName, "command": cmd})
      return availableAliases

    def printList(self):
      all = self.getAllAlias()
      print("")
      if (len(all) == 0):
        print("No alias available\n")
        return

      print("---- Available aliases ----\n")
      for kv in all:
        print("%s : %s"%(kv['alias'], kv['command']))
      
      print("\n")

    def run(self, argsValue={}):
      cmdArgs = argsValue["command"]
      name = argsValue["name"]
      delete = argsValue["delete"]
      list = argsValue["list"]

      if list:
        self.printList()
        return

      if not name:
        self.er.log("--name is expected")
        self.printList()
        return
      
      nameKey = "alias." + name
      existingCmd = getErVar(nameKey, "")

      if delete:
        self.er.log("Alias '%s' deleted, was set to '%s'"%(name, existingCmd))
        setEnvVar(nameKey, "")
        return

      if cmdArgs:
        if existingCmd:
          self.er.log("Alias '%s' is already set to '%s'"%(name, existingCmd))

        setErVar(nameKey, cmdArgs)
        self.er.log("Alias '%s' set to '%s'"%(name, cmdArgs))
        return
      
      self.er.log("Running '%s' "%(name))

      self.er.log("Executing '%s' "%(existingCmd))
      for cmd in existingCmd.split("&"):
        cmd = cmd.strip()
        if not cmd or cmd == "":
          continue
        cmdNArgs = cmd.split(" ")
        self.er.run(cmdNArgs[0], cmdNArgs[1:])
      


class Help:
    def __init__(self, er, scriptName, cmdsProvider):
      self.er = er
      self.cmdsProvider = cmdsProvider
      self.scriptName = scriptName

    def prefix(self):
      return "help"

    def alias(self):
      return ["?"]

    def description(self):
      return "The Help menu"

    def arguments(self):
      return {"command": {"alias": "c", "position" : 1, "description": "name/alias of command, empty prints all command help", "default": ""},
            "full": {"alias": "f", "flag": True, "description": "Full help"}
      }

    def run(self, argsValue={}):
      cmd = argsValue["command"]
      full = argsValue["full"] or cmd != ""

      eligibleCmds = []
      if (cmd == ""):
        print("Available commands:\n")
        print("---------------------")
        eligibleCmds = self.cmdsProvider()
      else:
        eligibleCmds = list(filter(lambda x: cmd in [x.prefix()]+x.alias(), self.cmdsProvider()))

      if (len(eligibleCmds) == 0 and cmd == ""):
        print("'%s' is not known command\n" % cmd)
        self.run()
        return

      if not full:
        print("\n".join(list(map(self.printCmdBriefHelp, eligibleCmds))))
      else:
        print("---------------------\n".join(list(map(self.printCmdFullHelp, eligibleCmds))))

    def printCmdBriefHelp(self, cmd):
      help = cmd.prefix() + \
            (" [Alias = " + ", ".join(cmd.alias()) +
             "]" if len(cmd.alias()) > 0 else "") + "\n"
      help += "\t" + cmd.description() + "\n"
      return help

    def printCmdFullHelp(self, cmd):
        help = ">> " + cmd.prefix() + \
            (" [Alias = " + ", ".join(cmd.alias()) +
             "]" if len(cmd.alias()) > 0 else "") + "\n"
        help += "Description:\n\t" + cmd.description() + "\n"
        help += "Usage :\n\n"
        help += self.createUsage(cmd) + "\n"
        return help

    def createUsage(self, cmd):
      dict = cmd.arguments()
      if isinstance(dict, str):
        return dict

      isFlag = lambda k : "flag" in dict[k].keys() and dict[k]["flag"] is True
      ret = "\t%s %s %s\n\n"%(self.scriptName, cmd.prefix(), " ".join(map(lambda l : "[--" + l + (" <VALUE>" if not isFlag(l) else "") + "]", dict.keys())));
      ret +="Parameters:\n"

      dictKeys = dict.keys()
      if (len(dictKeys) == 0):
        return "";
      maxPad = max(len(i) for i in dict.keys())

      for key in dict.keys():
        param = dict[key]
        padding = " "*(maxPad - len(key))
        isFlag = "flag" in param and param["flag"] is True
        position = int(param["position"]) if "position" in param else None
        flagPositionParam = " [Flag]" if isFlag else ("[%d]"%(position) if position is not None else "")
        defaultValue = param["default"] if "default" in param.keys() else None
        paramValue = "[Default='%s']"%(defaultValue) if defaultValue is not None else "[required]"
        ret += "\t[--%s -%s]%s :%s %s %s\n"%(key, param['alias'], padding, flagPositionParam, paramValue, param['description'])
      return ret;

def signalHandler(signal, frame):
    log("Stopping ...")
    sys.exit(-1)


def parseArgs():
    if (len(sys.argv) == 1):
        return None
    return [sys.argv[1], sys.argv[2:]]


def getScriptName():
    path = sys.argv[0]
    return path[path.rindex("/")+1:] if ("/" in path) else path

  
def main():
  signal.signal(signal.SIGINT, signalHandler)
  scriptName = getScriptName()

  scriptDir = os.path.dirname(__file__) + "/er-tools"
  sys.path.append(scriptDir)
  if not os.path.isdir(scriptDir):
    os.makedirs(scriptDir)

  er = ErContext()
  for tool in os.listdir(scriptDir):
    if tool[-3:] == ".py":
      mod = importlib.import_module(tool[:-3])
      if ("__module__" in dir(mod)):
        try:
          erExt = mod.__module__(er)
          if erExt is not None:
            er.register(erExt)
        except:
          log("Error while loading '%s'"%(mod.__name__))

  cmds = []
  help = Help(er, scriptName, lambda: cmds)
  alias = Alias(er)
  er.register(help)
  er.register(alias)
  cmds = er.tools

  args = parseArgs()
  if args is None:
    print("\nUsage : \n  %s <command|command_alias> [command args]\n" % scriptName)
    print("Example : \n  %s help" % scriptName)
    print("  %s help --full" % scriptName)
    print("  %s ? -f" % scriptName)
    sys.exit(1)
    return

  erCmd = args[0]
  cmdArgs = args[1]

  startTime = time.time()
  isHelp = cmdArgs is not None and ("help" in cmdArgs or "--help" in cmdArgs or "?" in cmdArgs)
  if (isHelp):
    ret = er.run("help", [args[0]])
  elif (alias.isAlias(erCmd)):
    ret = er.run("alias", ["--name", erCmd])
  else:
    ret = er.run(erCmd, cmdArgs)

  print("Total run time : %s" % (getTimeElapsed(startTime)))

  sys.exit(ret)


if __name__ == "__main__":
    main()
